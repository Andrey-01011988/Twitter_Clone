services:
  client:
    build:
      context: ../project
      dockerfile: ../project/client/Dockerfile
    ports:
      - "8080:80"
    depends_on:
      server:
        condition: service_started
    restart: always
    networks:
      - my_network
    volumes:
      - ./client/static:/app/static  # Использование той же локальной директории для статики
#      - ./client/templates:/app/templates  # Использование той же локальной директории для шаблонов
  server:
    build:
      context: ../project
      dockerfile: ../project/server/Dockerfile
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
#      test_db:
#        condition: service_healthy
    restart: always
    networks:
      - my_network
    volumes:
      - ./client/static:/app/static  # Монтирование локальной директории для статики
#      - ./client/templates:/app/templates  # Монтирование локальной директории для шаблонов
  db:
    image: postgres:latest
    container_name: postgres_container
    environment:
      - POSTGRES_DB=twitter
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d twitter -U admin"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    ports:
      - "5432:5432"
    networks:
      - my_network
    volumes:
      - ./init_db.sh:/docker-entrypoint-initdb.d/init_db.sh
      - ./db/:/var/lib/postgresql/data
#  test_db:
#    image: postgres:latest
#    container_name: test_postgres_container
#    environment:
#      - POSTGRES_DB=test_twitter
#      - POSTGRES_USER=test
#      - POSTGRES_PASSWORD=test
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -d test_twitter -U test" ]  # Добавляем healthcheck для тестовой БД
#      interval: 30s  # Интервал между проверками состояния контейнера
#      timeout: 60s   # Таймаут для каждой проверки состояния
#      retries: 5     # Количество попыток перед тем, как контейнер будет помечен как unhealthy
#      start_period: 80s  # Время ожидания перед первой проверкой состояния после запуска контейнера
#    ports:
#      - "5433:5432"
#    networks:
#      - my_network
#    volumes:
#      - ./init_test_db.sh:/docker-entrypoint-initdb.d/init_db.sh
#      - ./test_db/:/var/lib/postgresql/data

networks:
  my_network:
    driver: bridge
