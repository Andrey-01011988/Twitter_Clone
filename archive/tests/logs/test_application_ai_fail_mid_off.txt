Settings:

import logging

import pytest
from httpx import AsyncClient, ASGITransport
from sqlalchemy.ext.asyncio import AsyncSession

from application.api.dependencies import get_current_session
from application.main import app_proj
from application.models import BaseProj

from tests.test_database import test_engine, AsyncSessionTest
from tests.factories import UserFactory, TweetFactory, LikeFactory, MediaFactory, FollowerFactory  # Импортируйте фабрики


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# Назначение текущей сессии
async def override_get_session() -> AsyncSession:
    logger.info("Создание тестовой сессии Dependencies")
    async with AsyncSessionTest() as current_session:
        try:
            yield current_session
        finally:
            await current_session.close()
            logger.info("Закрытие тестовой сессии Dependencies")

app_proj.dependency_overrides[get_current_session] = override_get_session


@pytest.fixture(scope="function")
async def setup_database():
    print("Запуск фикстуры")
    async with test_engine.begin() as conn:
        print("Начало")
        await conn.run_sync(BaseProj.metadata.create_all)
        print("Тестовая б/д создана")

    async with AsyncSessionTest() as test_session:
        print("Создание новой тестовой сессии")
        users = []
        print(f"Текущая сессия: {test_session}")
        # Логирование информации о подключении
        connection_info = test_session.bind.url
        print(f"Подключение к базе данных: {connection_info}")
        UserFactory._meta.sqlalchemy_session = test_session
        for i in range(3):
            if i == 0:
                user = UserFactory(api_key='test')
            else:
                user = UserFactory()
            users.append(user)
        test_session.add_all(users)
        await test_session.commit()

        yield test_session  # Передаем сессию в тесты

    async with test_engine.begin() as conn:
        await conn.run_sync(BaseProj.metadata.drop_all)


@pytest.mark.asyncio
async def test_all_users(setup_database):
    async with AsyncClient(
            transport=ASGITransport(app=app_proj),
            base_url="http://server:5000") as ac:
        response = await ac.get("/api/all_users")
    assert response.status_code == 200
    assert len(response.json()) > 0


# pytest -v tests/test_application_ai.py

-------------------------------------------------------------------------------------------------------------------------

ERROR

# pytest -v tests/test_application_ai.py
=================================================================================================== test session starts ===================================================================================================
platform linux -- Python 3.11.11, pytest-8.3.3, pluggy-1.5.0 -- /usr/local/bin/python3.11
cachedir: .pytest_cache
rootdir: /server/tests
configfile: pytest.ini
plugins: asyncio-0.24.0, Faker-30.8.2, anyio-4.6.2.post1
asyncio: mode=Mode.AUTO, default_loop_scope=module
collected 1 item

tests/test_application_ai.py::test_all_users FAILED                                                                                                                                                                 [100%]
tests/test_application_ai.py::test_all_users ERROR                                                                                                                                                                  [100%]

========================================================================================================= ERRORS ==========================================================================================================
___________________________________________________________________________________________ ERROR at teardown of test_all_users ___________________________________________________________________________________________

self = <AdaptedConnection <asyncpg.connection.Connection object at 0x73c7fd7e4040>>

    async def _start_transaction(self):
        if self.isolation_level == "autocommit":
            return

        try:
            self._transaction = self._connection.transaction(
                isolation=self.isolation_level,
                readonly=self.readonly,
                deferrable=self.deferrable,
            )
>           await self._transaction.start()

/usr/local/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:831:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/local/lib/python3.11/site-packages/asyncpg/transaction.py:146: in start
    await self._connection.execute(query)
/usr/local/lib/python3.11/site-packages/asyncpg/connection.py:349: in execute
    result = await self._protocol.query(query, timeout)
asyncpg/protocol/protocol.pyx:360: in query
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

>   ???
E   asyncpg.exceptions._base.InterfaceError: cannot perform operation: another operation is in progress

asyncpg/protocol/protocol.pyx:745: InterfaceError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.engine.base.Connection object at 0x73c7f7699610>, dialect = <sqlalchemy.dialects.postgresql.asyncpg.PGDialect_asyncpg object at 0x73c7fdcf2e50>
context = <sqlalchemy.dialects.postgresql.asyncpg.PGExecutionContext_asyncpg object at 0x73c7f769be90>, statement = <sqlalchemy.dialects.postgresql.asyncpg.PGCompiler_asyncpg object at 0x73c7fd7f0310>
parameters = [('followers', 'r', 'p', 'f', 'v', 'm', ...)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.

        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()

            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )

        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )

        effective_parameters: Optional[_AnyExecuteParams]

        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters

        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )

        if self._echo:
            self._log_info(str_statement)

            stats = context._get_cache_stats()

            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )

        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1967:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
/usr/local/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:568: in execute
    self._adapt_connection.await_(
/usr/local/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
/usr/local/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
/usr/local/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:504: in _prepare_and_execute
    await adapt_connection._start_transaction()
/usr/local/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:833: in _start_transaction
    self._handle_exception(error)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <AdaptedConnection <asyncpg.connection.Connection object at 0x73c7fd7e4040>>, error = InterfaceError('cannot perform operation: another operation is in progress')

    def _handle_exception(self, error):
        if self._connection.is_closed():
            self._transaction = None
            self._started = False

        if not isinstance(error, AsyncAdapt_asyncpg_dbapi.Error):
            exception_mapping = self.dbapi._asyncpg_error_translate

            for super_ in type(error).__mro__:
                if super_ in exception_mapping:
                    translated_error = exception_mapping[super_](
                        "%s: %s" % (type(error), error)
                    )
                    translated_error.pgcode = translated_error.sqlstate = (
                        getattr(error, "sqlstate", None)
                    )
>                   raise translated_error from error
E                   sqlalchemy.dialects.postgresql.asyncpg.AsyncAdapt_asyncpg_dbapi.InterfaceError: <class 'asyncpg.exceptions._base.InterfaceError'>: cannot perform operation: another operation is in progress

/usr/local/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:780: InterfaceError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    async def setup_database():
        print("Запуск фикстуры")
        async with test_engine.begin() as conn:
            print("Начало")
            await conn.run_sync(BaseProj.metadata.create_all)
            print("Тестовая б/д создана")

        async with AsyncSessionTest() as test_session:
            print("Создание новой тестовой сессии")
            users = []
            print(f"Текущая сессия: {test_session}")
            # Логирование информации о подключении
            connection_info = test_session.bind.url
            print(f"Подключение к базе данных: {connection_info}")
            UserFactory._meta.sqlalchemy_session = test_session
            for i in range(3):
                if i == 0:
                    user = UserFactory(api_key='test')
                else:
                    user = UserFactory()
                users.append(user)
            test_session.add_all(users)
            await test_session.commit()

        yield

        async with test_engine.begin() as conn:
>           await conn.run_sync(BaseProj.metadata.drop_all)

tests/test_application_ai.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/local/lib/python3.11/site-packages/sqlalchemy/ext/asyncio/engine.py:886: in run_sync
    return await greenlet_spawn(
/usr/local/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:201: in greenlet_spawn
    result = context.throw(*sys.exc_info())
/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/schema.py:5896: in drop_all
    bind._run_ddl_visitor(
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/ddl.py:1018: in visit_metadata
    unsorted_tables = [t for t in tables if self._can_drop_table(t)]
/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/ddl.py:1018: in <listcomp>
    unsorted_tables = [t for t in tables if self._can_drop_table(t)]
/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/ddl.py:1094: in _can_drop_table
    return not self.checkfirst or self.dialect.has_table(
<string>:2: in has_table
    ???
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/reflection.py:89: in cache
    return fn(self, con, *args, **kw)
/usr/local/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/base.py:3346: in has_table
    return bool(connection.scalar(query, {"table_name": table_name}))
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1307: in scalar
    return meth(
/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:533: in _execute_on_scalar
    return self._execute_on_connection(
/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
/usr/local/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:568: in execute
    self._adapt_connection.await_(
/usr/local/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
/usr/local/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
/usr/local/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:504: in _prepare_and_execute
    await adapt_connection._start_transaction()
/usr/local/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:833: in _start_transaction
    self._handle_exception(error)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <AdaptedConnection <asyncpg.connection.Connection object at 0x73c7fd7e4040>>, error = InterfaceError('cannot perform operation: another operation is in progress')

    def _handle_exception(self, error):
        if self._connection.is_closed():
            self._transaction = None
            self._started = False

        if not isinstance(error, AsyncAdapt_asyncpg_dbapi.Error):
            exception_mapping = self.dbapi._asyncpg_error_translate

            for super_ in type(error).__mro__:
                if super_ in exception_mapping:
                    translated_error = exception_mapping[super_](
                        "%s: %s" % (type(error), error)
                    )
                    translated_error.pgcode = translated_error.sqlstate = (
                        getattr(error, "sqlstate", None)
                    )
>                   raise translated_error from error
E                   sqlalchemy.exc.InterfaceError: (sqlalchemy.dialects.postgresql.asyncpg.InterfaceError) <class 'asyncpg.exceptions._base.InterfaceError'>: cannot perform operation: another operation is in progress
E                   [SQL: SELECT pg_catalog.pg_class.relname
E                   FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
E                   WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR]
E                   [parameters: ('followers', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')]
E                   (Background on this error at: https://sqlalche.me/e/20/rvf5)

/usr/local/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:780: InterfaceError
-------------------------------------------------------------------------------------------------- Captured stdout setup --------------------------------------------------------------------------------------------------
Запуск фикстуры
2024-12-25 12:15:21,431 INFO sqlalchemy.engine.Engine select pg_catalog.version()
2024-12-25 12:15:21,432 INFO sqlalchemy.engine.Engine [raw sql] ()
2024-12-25 12:15:21,433 INFO sqlalchemy.engine.Engine select current_schema()
2024-12-25 12:15:21,433 INFO sqlalchemy.engine.Engine [raw sql] ()
2024-12-25 12:15:21,434 INFO sqlalchemy.engine.Engine show standard_conforming_strings
2024-12-25 12:15:21,434 INFO sqlalchemy.engine.Engine [raw sql] ()
2024-12-25 12:15:21,435 INFO sqlalchemy.engine.Engine BEGIN (implicit)
Начало
2024-12-25 12:15:21,437 INFO sqlalchemy.engine.Engine SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
2024-12-25 12:15:21,437 INFO sqlalchemy.engine.Engine [generated in 0.00021s] ('followers', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
2024-12-25 12:15:21,439 INFO sqlalchemy.engine.Engine SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
2024-12-25 12:15:21,439 INFO sqlalchemy.engine.Engine [cached since 0.001909s ago] ('users', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
2024-12-25 12:15:21,440 INFO sqlalchemy.engine.Engine SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
2024-12-25 12:15:21,440 INFO sqlalchemy.engine.Engine [cached since 0.002402s ago] ('tweets', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
2024-12-25 12:15:21,440 INFO sqlalchemy.engine.Engine SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
2024-12-25 12:15:21,440 INFO sqlalchemy.engine.Engine [cached since 0.00282s ago] ('likes', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
2024-12-25 12:15:21,440 INFO sqlalchemy.engine.Engine SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
2024-12-25 12:15:21,441 INFO sqlalchemy.engine.Engine [cached since 0.003282s ago] ('media', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
Тестовая б/д создана
2024-12-25 12:15:21,441 INFO sqlalchemy.engine.Engine COMMIT
Создание новой тестовой сессии
Текущая сессия: <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x73c7fdcb1190>
Подключение к базе данных: postgresql+asyncpg://test:***@test_postgres_container:5432/test_twitter
2024-12-25 12:15:21,451 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2024-12-25 12:15:21,452 INFO sqlalchemy.engine.Engine INSERT INTO users (name, api_key) SELECT p0::VARCHAR, p1::VARCHAR FROM (VALUES ($1::VARCHAR, $2::VARCHAR, 0), ($3::VARCHAR, $4::VARCHAR, 1), ($5::VARCHAR, $6::VARCHAR, 2)) AS imp_sen(p0, p1, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
2024-12-25 12:15:21,452 INFO sqlalchemy.engine.Engine [generated in 0.00009s (insertmanyvalues) 1/1 (ordered)] ('Фадеева Лора Геннадиевна', 'test', 'Горбунов Гордей Ануфриевич', 'SW459l39', 'г-н Красильников Панфил Антипович', 'gS214G46')
2024-12-25 12:15:21,454 INFO sqlalchemy.engine.Engine COMMIT
--------------------------------------------------------------------------------------------------- Captured log setup ----------------------------------------------------------------------------------------------------
INFO     sqlalchemy.engine.Engine:base.py:1846 select pg_catalog.version()
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 select current_schema()
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 show standard_conforming_strings
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2701 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
INFO     sqlalchemy.engine.Engine:base.py:1846 [generated in 0.00021s] ('followers', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
INFO     sqlalchemy.engine.Engine:base.py:1846 SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
INFO     sqlalchemy.engine.Engine:base.py:1846 [cached since 0.001909s ago] ('users', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
INFO     sqlalchemy.engine.Engine:base.py:1846 SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
INFO     sqlalchemy.engine.Engine:base.py:1846 [cached since 0.002402s ago] ('tweets', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
INFO     sqlalchemy.engine.Engine:base.py:1846 SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
INFO     sqlalchemy.engine.Engine:base.py:1846 [cached since 0.00282s ago] ('likes', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
INFO     sqlalchemy.engine.Engine:base.py:1846 SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
INFO     sqlalchemy.engine.Engine:base.py:1846 [cached since 0.003282s ago] ('media', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
INFO     sqlalchemy.engine.Engine:base.py:2707 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2701 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1844 INSERT INTO users (name, api_key) SELECT p0::VARCHAR, p1::VARCHAR FROM (VALUES ($1::VARCHAR, $2::VARCHAR, 0), ($3::VARCHAR, $4::VARCHAR, 1), ($5::VARCHAR, $6::VARCHAR, 2)) AS imp_sen(p0, p1, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
INFO     sqlalchemy.engine.Engine:base.py:1844 [generated in 0.00009s (insertmanyvalues) 1/1 (ordered)] ('Фадеева Лора Геннадиевна', 'test', 'Горбунов Гордей Ануфриевич', 'SW459l39', 'г-н Красильников Панфил Антипович', 'gS214G46')
INFO     sqlalchemy.engine.Engine:base.py:2707 COMMIT
-------------------------------------------------------------------------------------------------- Captured stdout call ---------------------------------------------------------------------------------------------------
2024-12-25 12:15:21,457 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2024-12-25 12:15:21,458 INFO sqlalchemy.engine.Engine SELECT users.id, users.name, users.api_key
FROM users
2024-12-25 12:15:21,458 INFO sqlalchemy.engine.Engine [generated in 0.00012s] ()
2024-12-25 12:15:21,458 INFO sqlalchemy.engine.Engine ROLLBACK
---------------------------------------------------------------------------------------------------- Captured log call ----------------------------------------------------------------------------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2701 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 SELECT users.id, users.name, users.api_key
FROM users
INFO     sqlalchemy.engine.Engine:base.py:1846 [generated in 0.00012s] ()
INFO     sqlalchemy.engine.Engine:base.py:2704 ROLLBACK
------------------------------------------------------------------------------------------------ Captured stdout teardown -------------------------------------------------------------------------------------------------
2024-12-25 12:15:21,933 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2024-12-25 12:15:21,933 INFO sqlalchemy.engine.Engine SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
2024-12-25 12:15:21,933 INFO sqlalchemy.engine.Engine [cached since 0.4958s ago] ('followers', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
2024-12-25 12:15:21,933 INFO sqlalchemy.engine.Engine ROLLBACK
-------------------------------------------------------------------------------------------------- Captured log teardown --------------------------------------------------------------------------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2701 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
INFO     sqlalchemy.engine.Engine:base.py:1846 [cached since 0.4958s ago] ('followers', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
INFO     sqlalchemy.engine.Engine:base.py:2704 ROLLBACK
======================================================================================================== FAILURES =========================================================================================================
_____________________________________________________________________________________________________ test_all_users ______________________________________________________________________________________________________

setup_database = None

    @pytest.mark.asyncio
    async def test_all_users(setup_database):
        async with AsyncClient(
                transport=ASGITransport(app=app_proj),
                base_url="http://server:5000") as ac:
>           response = await ac.get("/api/all_users")

tests/test_application_ai.py:68:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/local/lib/python3.11/site-packages/httpx/_client.py:1814: in get
    return await self.request(
/usr/local/lib/python3.11/site-packages/httpx/_client.py:1585: in request
    return await self.send(request, auth=auth, follow_redirects=follow_redirects)
/usr/local/lib/python3.11/site-packages/httpx/_client.py:1674: in send
    response = await self._send_handling_auth(
/usr/local/lib/python3.11/site-packages/httpx/_client.py:1702: in _send_handling_auth
    response = await self._send_handling_redirects(
/usr/local/lib/python3.11/site-packages/httpx/_client.py:1739: in _send_handling_redirects
    response = await self._send_single_request(request)
/usr/local/lib/python3.11/site-packages/httpx/_client.py:1776: in _send_single_request
    response = await transport.handle_async_request(request)
/usr/local/lib/python3.11/site-packages/httpx/_transports/asgi.py:157: in handle_async_request
    await self.app(scope, receive, send)
/usr/local/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
/usr/local/lib/python3.11/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
/usr/local/lib/python3.11/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
/usr/local/lib/python3.11/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
/usr/local/lib/python3.11/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
/usr/local/lib/python3.11/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
/usr/local/lib/python3.11/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
/usr/local/lib/python3.11/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
/usr/local/lib/python3.11/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
/usr/local/lib/python3.11/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
/usr/local/lib/python3.11/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
/usr/local/lib/python3.11/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
/usr/local/lib/python3.11/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
/usr/local/lib/python3.11/site-packages/starlette/routing.py:73: in app
    response = await f(request)
/usr/local/lib/python3.11/site-packages/fastapi/routing.py:301: in app
    raw_response = await run_endpoint_function(
/usr/local/lib/python3.11/site-packages/fastapi/routing.py:212: in run_endpoint_function
    return await dependant.call(**values)
application/api/endpoints.py:38: in get_all_users
    result = await UserDAO.find_all(session=session)
application/crud.py:100: in find_all
    result = await session.execute(query)
/usr/local/lib/python3.11/site-packages/sqlalchemy/ext/asyncio/session.py:461: in execute
    result = await greenlet_spawn(
/usr/local/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:201: in greenlet_spawn
    result = context.throw(*sys.exc_info())
/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2362: in execute
    return self._execute_internal(
/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2247: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/context.py:305: in orm_execute_statement
    result = conn.execute(
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2358: in _handle_dbapi_exception
    raise exc_info[1].with_traceback(exc_info[2])
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
/usr/local/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:568: in execute
    self._adapt_connection.await_(
/usr/local/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
/usr/local/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
/usr/local/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:504: in _prepare_and_execute
    await adapt_connection._start_transaction()
/usr/local/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:833: in _start_transaction
    self._handle_exception(error)
/usr/local/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:782: in _handle_exception
    raise error
/usr/local/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:831: in _start_transaction
    await self._transaction.start()
/usr/local/lib/python3.11/site-packages/asyncpg/transaction.py:146: in start
    await self._connection.execute(query)
/usr/local/lib/python3.11/site-packages/asyncpg/connection.py:349: in execute
    result = await self._protocol.query(query, timeout)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

>   ???
E   RuntimeError: Task <Task pending name='Task-4' coro=<test_all_users() running at /server/tests/test_application_ai.py:68> cb=[_run_until_complete_cb() at /usr/local/lib/python3.11/asyncio/base_events.py:181]> got Future <Future pending cb=[BaseProtocol._on_waiter_completed()]> attached to a different loop

asyncpg/protocol/protocol.pyx:375: RuntimeError
-------------------------------------------------------------------------------------------------- Captured stdout setup --------------------------------------------------------------------------------------------------
Запуск фикстуры
2024-12-25 12:15:21,431 INFO sqlalchemy.engine.Engine select pg_catalog.version()
2024-12-25 12:15:21,432 INFO sqlalchemy.engine.Engine [raw sql] ()
2024-12-25 12:15:21,433 INFO sqlalchemy.engine.Engine select current_schema()
2024-12-25 12:15:21,433 INFO sqlalchemy.engine.Engine [raw sql] ()
2024-12-25 12:15:21,434 INFO sqlalchemy.engine.Engine show standard_conforming_strings
2024-12-25 12:15:21,434 INFO sqlalchemy.engine.Engine [raw sql] ()
2024-12-25 12:15:21,435 INFO sqlalchemy.engine.Engine BEGIN (implicit)
Начало
2024-12-25 12:15:21,437 INFO sqlalchemy.engine.Engine SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
2024-12-25 12:15:21,437 INFO sqlalchemy.engine.Engine [generated in 0.00021s] ('followers', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
2024-12-25 12:15:21,439 INFO sqlalchemy.engine.Engine SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
2024-12-25 12:15:21,439 INFO sqlalchemy.engine.Engine [cached since 0.001909s ago] ('users', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
2024-12-25 12:15:21,440 INFO sqlalchemy.engine.Engine SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
2024-12-25 12:15:21,440 INFO sqlalchemy.engine.Engine [cached since 0.002402s ago] ('tweets', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
2024-12-25 12:15:21,440 INFO sqlalchemy.engine.Engine SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
2024-12-25 12:15:21,440 INFO sqlalchemy.engine.Engine [cached since 0.00282s ago] ('likes', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
2024-12-25 12:15:21,440 INFO sqlalchemy.engine.Engine SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
2024-12-25 12:15:21,441 INFO sqlalchemy.engine.Engine [cached since 0.003282s ago] ('media', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
Тестовая б/д создана
2024-12-25 12:15:21,441 INFO sqlalchemy.engine.Engine COMMIT
Создание новой тестовой сессии
Текущая сессия: <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x73c7fdcb1190>
Подключение к базе данных: postgresql+asyncpg://test:***@test_postgres_container:5432/test_twitter
2024-12-25 12:15:21,451 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2024-12-25 12:15:21,452 INFO sqlalchemy.engine.Engine INSERT INTO users (name, api_key) SELECT p0::VARCHAR, p1::VARCHAR FROM (VALUES ($1::VARCHAR, $2::VARCHAR, 0), ($3::VARCHAR, $4::VARCHAR, 1), ($5::VARCHAR, $6::VARCHAR, 2)) AS imp_sen(p0, p1, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
2024-12-25 12:15:21,452 INFO sqlalchemy.engine.Engine [generated in 0.00009s (insertmanyvalues) 1/1 (ordered)] ('Фадеева Лора Геннадиевна', 'test', 'Горбунов Гордей Ануфриевич', 'SW459l39', 'г-н Красильников Панфил Антипович', 'gS214G46')
2024-12-25 12:15:21,454 INFO sqlalchemy.engine.Engine COMMIT
--------------------------------------------------------------------------------------------------- Captured log setup ----------------------------------------------------------------------------------------------------
INFO     sqlalchemy.engine.Engine:base.py:1846 select pg_catalog.version()
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 select current_schema()
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 show standard_conforming_strings
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2701 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
INFO     sqlalchemy.engine.Engine:base.py:1846 [generated in 0.00021s] ('followers', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
INFO     sqlalchemy.engine.Engine:base.py:1846 SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
INFO     sqlalchemy.engine.Engine:base.py:1846 [cached since 0.001909s ago] ('users', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
INFO     sqlalchemy.engine.Engine:base.py:1846 SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
INFO     sqlalchemy.engine.Engine:base.py:1846 [cached since 0.002402s ago] ('tweets', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
INFO     sqlalchemy.engine.Engine:base.py:1846 SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
INFO     sqlalchemy.engine.Engine:base.py:1846 [cached since 0.00282s ago] ('likes', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
INFO     sqlalchemy.engine.Engine:base.py:1846 SELECT pg_catalog.pg_class.relname
FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON pg_catalog.pg_namespace.oid = pg_catalog.pg_class.relnamespace
WHERE pg_catalog.pg_class.relname = $1::VARCHAR AND pg_catalog.pg_class.relkind = ANY (ARRAY[$2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR]) AND pg_catalog.pg_table_is_visible(pg_catalog.pg_class.oid) AND pg_catalog.pg_namespace.nspname != $7::VARCHAR
INFO     sqlalchemy.engine.Engine:base.py:1846 [cached since 0.003282s ago] ('media', 'r', 'p', 'f', 'v', 'm', 'pg_catalog')
INFO     sqlalchemy.engine.Engine:base.py:2707 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2701 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1844 INSERT INTO users (name, api_key) SELECT p0::VARCHAR, p1::VARCHAR FROM (VALUES ($1::VARCHAR, $2::VARCHAR, 0), ($3::VARCHAR, $4::VARCHAR, 1), ($5::VARCHAR, $6::VARCHAR, 2)) AS imp_sen(p0, p1, sen_counter) ORDER BY sen_counter RETURNING users.id, users.id AS id__1
INFO     sqlalchemy.engine.Engine:base.py:1844 [generated in 0.00009s (insertmanyvalues) 1/1 (ordered)] ('Фадеева Лора Геннадиевна', 'test', 'Горбунов Гордей Ануфриевич', 'SW459l39', 'г-н Красильников Панфил Антипович', 'gS214G46')
INFO     sqlalchemy.engine.Engine:base.py:2707 COMMIT
-------------------------------------------------------------------------------------------------- Captured stdout call ---------------------------------------------------------------------------------------------------
2024-12-25 12:15:21,457 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2024-12-25 12:15:21,458 INFO sqlalchemy.engine.Engine SELECT users.id, users.name, users.api_key
FROM users
2024-12-25 12:15:21,458 INFO sqlalchemy.engine.Engine [generated in 0.00012s] ()
2024-12-25 12:15:21,458 INFO sqlalchemy.engine.Engine ROLLBACK
---------------------------------------------------------------------------------------------------- Captured log call ----------------------------------------------------------------------------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2701 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 SELECT users.id, users.name, users.api_key
FROM users
INFO     sqlalchemy.engine.Engine:base.py:1846 [generated in 0.00012s] ()
INFO     sqlalchemy.engine.Engine:base.py:2704 ROLLBACK
================================================================================================= short test summary info =================================================================================================
FAILED tests/test_application_ai.py::test_all_users - RuntimeError: Task <Task pending name='Task-4' coro=<test_all_users() running at /server/tests/test_application_ai.py:68> cb=[_run_until_complete_cb() at /usr/local/lib/python3.11/asyncio/base_events.py:181]> got F...
ERROR tests/test_application_ai.py::test_all_users - sqlalchemy.exc.InterfaceError: (sqlalchemy.dialects.postgresql.asyncpg.InterfaceError) <class 'asyncpg.exceptions._base.InterfaceError'>: cannot perform operation: another operation is in progress
=============================================================================================== 1 failed, 1 error in 1.75s ================================================================================================
#
